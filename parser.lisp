(defun parser (lex-table)
  (labels ((%parser (lex-list)
             (multiple-value-bind (statement next-lst)
                 (stmt lex-list)
               (if next-lst
                   (cons statement (%parser next-lst))
                   (list statement)))))
    (%parser lex-table)))

(defun stmt (line)
  (multiple-value-bind (expr-line next-line)
      (if (equal (first line) 'const)
          (definition (rest line))
          (expr line))
    (if (equal (first next-line) 'semicolon)
        (values expr-line (rest next-line))
        (error "; expected"))))

(defun definition (line)
  (if (equal (first line) 'ident)
      (if (equal (second line) 'assign)
          (multiple-value-bind (expr-line next-line)
              (expr (rest (rest line)))
            (values (list 'define (first line) expr-line) next-line))
          (error ":= expected"))
      (error "variable expected")))

(defun factor (line)
  (cond
    ((equal 'l-bracket (first line))
     (multiple-value-bind (in-bracket next-line)
         (expr (rest line))
       (if (equal (first next-line) 'r-bracket)
           (values in-bracket (rest next-line))
           (error "Unexpected end of string"))))
    ((equal 'ident (first line))
     (values (first line) (rest line)))
    ((equal 'number (first (first line)))
     (values (first line) (rest line)))
    (t
     (error "Unexpected symbol"))))

(defun term (line)
  (if line
      (multiple-value-bind (left-line next-line)
          (factor line)
        (term-list next-line left-line))
      (error "Unexpected end of string")))

(defun term-list (line left-val)
  (if (and (not (null line)) (member (first line) '(mul div)))
      (multiple-value-bind (right-val next-line)
          (term (rest line))
        (values `(expr ,(first line) ,left-val ,right-val) next-line))
      (values left-val line)))

(defun expr (line)
  (if line
      (multiple-value-bind (left-val next-line)
          (term line)
        (expr-list next-line left-val))
      (error "Unexpected end of string")))

(defun expr-list (line left-val)
  (if (or (null line) (equal (first line) 'r-bracket)
          (equal (first line) 'semicolon))
      (values left-val line)
      (if (member (first line) '(add sub))
          (multiple-value-bind (right-val next-line)
              (expr (rest line))
            (values `(expr ,(first line) ,left-val , right-val) next-line))
          (error "Unexpected symbol"))))
